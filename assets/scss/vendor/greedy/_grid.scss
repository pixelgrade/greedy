* {@include box-sizing(border-box !important);}

// IE10 snap mode
@-ms-viewport {width: device-width}
@viewport {width: device-width}

img {max-width: 100%}

%grid {
  @include rem(width, $gridWidth);
  margin-left: auto;
  margin-right: auto;

  @if $responsive == true {
    @media only screen {
      max-width: 100%;
    }
  }
}

%row {
  @extend %clearfix;
  @include rem(margin-left, -1 * $gridGutter);
}

%span {
  position: relative;
  border: 0 solid transparent;
  @include rem(border-left-width, $gridGutter);
  @include background-clip(padding-box !important);
  @include background-origin(padding-box !important);
  float: left;
  min-height: 1px;
}

// watch and learn
[class*="span"] {
  @extend %span;
}

$bpNames: ();
$bpSizes: ();
@mixin processBreakpoints() {
  @each $bp in $breakpoints {
    @if index($breakpoints, $bp) % 2 == 0 {
      $bpNames: append($bpNames, $bp);
    } @else {
      $bpSizes: append($bpSizes, $bp);
    }
  }
  $bpSizes: append($bpSizes, 0);
}

@include processBreakpoints();

@function emQuery($px) {
  @return $px/16px + em;
}

@function queryString($query) {
  $string: "";
  @if length($query) == 1 {
    @if nth($query, 1) != 0 {
      $string: " and (min-width: " + emQuery($query) + ")";
    }
  }
  @if length($query) == 2 {
    @if nth($query, 2) == 0 {
      @if nth($query, 1) != 0 {
        $string: " and (min-width: " + emQuery(nth($query,1)) + ")";
      }
    } @else {
      @if nth($query, 1) == 0 {
        $string: " and (max-width: " + emQuery(nth($query,2)) + ")";
      } @else {
        $string: " and (min-width: " + emQuery(nth($query,1)) + ") and (max-width: " + emQuery(nth($query,2)) + ")";
      }
    }
  }
  @return unquote("only screen" + $string);
}

@mixin myQuery($query) {
  $queryString: queryString($query);
  @if $queryString == "only screen" {
    @content;
  } @else {
    @media #{$queryString} {
      @content;
    }
  }
}

@mixin media($query) {
  @if length($query) == 1 {
    $index: index($bpNames, $query);
    @if $index {
      $bp1: nth($bpSizes, $index);
      $bp2: nth($bpSizes, $index + 1);
      // $bp2: if($bp2 > 0, $bp2 - 1px, $bp2);
      @include myQuery($bp1 $bp2) {
        @content;
      }
    } @else {
      @include myQuery($query 0) {
        @content;
      }
    }
  } @else {
    $bp1: nth($query,1);
    $bp2: nth($query,2);
    $index1: index($bpNames, $bp1);
    $index2: index($bpNames, $bp2);
    @if $index1 != false {
      $bp1: nth($bpSizes, $index1);
    }
    @if $index2 != false {
      @if $bp1 == from {
        $bp2: nth($bpSizes, $index2);
      } @else {
        $bp2: nth($bpSizes, $index2 + 1);
        $bp2: if($bp2 > 0, $bp2 - 1, $bp2);
      }
    }
    @if ($bp1 == from) {
      $bp1: $bp2;
      $bp2: 0;
    }
    @if ($bp1 == to) {
      $bp1: 0;
    }
    @include myQuery($bp1 $bp2) {
      @content;
    }
  }
}

@function getBreakpointSize($bp) {
  $index: index($bpNames, $bp);
  @if $index == false {
    @return $bp;
  } @else {
    @return nth($bpSizes, $index);
  }
}

$classN: (); // name
$classR: (); // ratio
$classP: (); // placeholder
$classT: (); // type

// grid
$columns: 12;
@for $i from 1 through $columns {
  @include newClass(span#{$i}, $i / $columns, span, false);
  @include newClass(offset#{$i}, $i / $columns, offset, false);
  @include newClass(push#{$i}, $i / $columns, push, false);
  @include newClass(pull#{$i}, $i / $columns, pull, false);
}
@include generateClasses();